#!/usr/bin/env python3
"""
Let's Do Solution - –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–µ—à–µ–Ω–∏—è–º TheSolution CAD
–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—à–µ–Ω–∏—è–º–∏
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "Base Solution" / "python"))
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "Root Solution" / "python"))

def show_solutions_menu():
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ—à–µ–Ω–∏–π"""
    print("üèóÔ∏è LET'S DO SOLUTION - TheSolution CAD")
    print("=" * 50)
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã:")
    print()
    print("üéØ 3D-Solution (–ü–†–ò–û–†–ò–¢–ï–¢)")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å 3D-Solution")
    print("   2. –°–æ–∑–¥–∞—Ç—å 3D –æ–±—ä–µ–∫—Ç—ã")
    print("   3. –†–∞–±–æ—Ç–∞ —Å –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π")
    print()
    print("üìê 2D-Solution")
    print("   4. –ó–∞–ø—É—Å—Ç–∏—Ç—å 2D-Solution")
    print("   5. –°–æ–∑–¥–∞—Ç—å —á–µ—Ä—Ç–µ–∂–∏")
    print()
    print("üîß Assembly-Solution")
    print("   6. –ó–∞–ø—É—Å—Ç–∏—Ç—å Assembly-Solution")
    print("   7. –°–æ–∑–¥–∞—Ç—å —Å–±–æ—Ä–∫–∏")
    print()
    print("üìä Analysis-Solution")
    print("   8. –ó–∞–ø—É—Å—Ç–∏—Ç—å Analysis-Solution")
    print("   9. –ê–Ω–∞–ª–∏–∑ –∏ —Ä–∞—Å—á–µ—Ç—ã")
    print()
    print("üîÑ Simulation-Solution")
    print("   10. –ó–∞–ø—É—Å—Ç–∏—Ç—å Simulation-Solution")
    print("   11. –°–∏–º—É–ª—è—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print()
    print("üè≠ Manufacturing-Solution")
    print("   12. –ó–∞–ø—É—Å—Ç–∏—Ç—å Manufacturing-Solution")
    print("   13. –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ CAM")
    print()
    print("üìÑ Documentation-Solution")
    print("   14. –ó–∞–ø—É—Å—Ç–∏—Ç—å Documentation-Solution")
    print("   15. –î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç")
    print()
    print("üë• Collaboration-Solution")
    print("   16. –ó–∞–ø—É—Å—Ç–∏—Ç—å Collaboration-Solution")
    print("   17. –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
    print()
    print("üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
    print("   18. Root Solution Launcher")
    print("   19. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    print("   20. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
    print()
    print("‚ùå 0. –í—ã—Ö–æ–¥")
    print()

def launch_3d_solution():
    """–ó–∞–ø—É—Å–∫ 3D-Solution"""
    print("üéØ –ó–∞–ø—É—Å–∫ 3D-Solution...")
    try:
        import subprocess
        subprocess.run([sys.executable, "Root Solution/3D-Solution/main_3d.py"])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

def create_3d_objects():
    """–°–æ–∑–¥–∞–Ω–∏–µ 3D –æ–±—ä–µ–∫—Ç–æ–≤"""
    print("üî∏ –°–æ–∑–¥–∞–Ω–∏–µ 3D –æ–±—ä–µ–∫—Ç–æ–≤...")
    try:
        from solution_data_types import SolutionType, SolutionDataUtils, SolutionCoordinate, SolutionMaterial
        
        # –°–æ–∑–¥–∞–µ–º –∫—É–±
        box = SolutionDataUtils.create_minimal_solution_data(
            name="–ú–æ–π –ö—É–±",
            solution_type=SolutionType.BOX,
            coordinate=SolutionCoordinate(0, 0, 0)
        )
        box.dimensions.width = 10.0
        box.dimensions.height = 10.0
        box.dimensions.depth = 10.0
        box.properties.material = SolutionMaterial(name="Steel", density=7.85)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ñ–µ—Ä—É
        sphere = SolutionDataUtils.create_minimal_solution_data(
            name="–ú–æ—è –°—Ñ–µ—Ä–∞",
            solution_type=SolutionType.SPHERE,
            coordinate=SolutionCoordinate(15, 0, 0)
        )
        sphere.dimensions.radius = 5.0
        sphere.properties.material = SolutionMaterial(name="Aluminum", density=2.7)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω {box.properties.name} - –æ–±—ä–µ–º: {box.dimensions.get_volume_box():.2f} –∫—É–±.–µ–¥.")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ {sphere.properties.name} - –æ–±—ä–µ–º: {sphere.dimensions.get_volume_sphere():.2f} –∫—É–±.–µ–¥.")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤: {e}")

def launch_root_launcher():
    """–ó–∞–ø—É—Å–∫ Root Solution Launcher"""
    print("üèóÔ∏è –ó–∞–ø—É—Å–∫ Root Solution Launcher...")
    try:
        import subprocess
        subprocess.run([sys.executable, "Root Solution/main.py"])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

def run_demo():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üé¨ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
    try:
        import subprocess
        subprocess.run([sys.executable, "demo_root_solution.py"])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    try:
        import subprocess
        subprocess.run([sys.executable, "test_root_solution.py"])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

def show_solution_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—à–µ–Ω–∏—è—Ö"""
    try:
        from root_solution_manager import get_root_manager
        
        manager = get_root_manager()
        solutions_info = manager.get_all_solutions_info()
        
        print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—à–µ–Ω–∏—è—Ö:")
        print("=" * 40)
        
        for name, info in solutions_info.items():
            status_icon = "‚úÖ" if info["status"] == "active" else "‚è∏Ô∏è"
            print(f"{status_icon} {name}: {info['description']}")
        
        active_count = len([s for s in solutions_info.values() if s["status"] == "active"])
        print(f"\nüìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π: {active_count}/{len(solutions_info)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    while True:
        show_solutions_menu()
        
        try:
            choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—ã–±–æ—Ä–∞: ").strip()
            
            if choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == "1":
                launch_3d_solution()
            elif choice == "2":
                create_3d_objects()
            elif choice == "18":
                launch_root_launcher()
            elif choice == "19":
                run_demo()
            elif choice == "20":
                run_tests()
            elif choice == "info":
                show_solution_info()
            else:
                print(f"‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è {choice} –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
                print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: 1, 2, 18, 19, 20")
            
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()
