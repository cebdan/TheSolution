#!/usr/bin/env python3
"""
3D-Solution GUI - –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ 3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è TheSolution CAD
–ó–∞–≥—Ä—É–∂–∞–µ—Ç UI —Ñ–∞–π–ª 3D-solution_main.ui –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""

import sys
import subprocess
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "Base Solution" / "python"))
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "Root Solution" / "python"))

try:
    from PySide6.QtWidgets import (QApplication, QMainWindow, QMessageBox, 
                                   QTreeWidgetItem, QFileDialog, QSplitter)
    from PySide6.QtCore import Qt, QThread, Signal
    from PySide6.QtGui import QIcon, QFont
    from PySide6.QtUiTools import QUiLoader
    print("‚úÖ PySide6 –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ PySide6: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install PySide6")
    sys.exit(1)

class ObjectCreationWorker(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 3D –æ–±—ä–µ–∫—Ç–æ–≤"""
    log_signal = Signal(str)
    finished_signal = Signal(bool, str)
    
    def __init__(self, object_type, name, params):
        super().__init__()
        self.object_type = object_type
        self.name = name
        self.params = params
    
    def run(self):
        try:
            from solution_data_types import SolutionType, SolutionDataUtils, SolutionCoordinate, SolutionMaterial
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if self.object_type == "box":
                obj_data = SolutionDataUtils.create_minimal_solution_data(
                    name=self.name,
                    solution_type=SolutionType.BOX,
                    coordinate=SolutionCoordinate(0, 0, 0)
                )
                obj_data.dimensions.width = self.params.get('width', 10.0)
                obj_data.dimensions.height = self.params.get('height', 10.0)
                obj_data.dimensions.depth = self.params.get('depth', 10.0)
                volume = obj_data.dimensions.get_volume_box()
                
            elif self.object_type == "sphere":
                obj_data = SolutionDataUtils.create_minimal_solution_data(
                    name=self.name,
                    solution_type=SolutionType.SPHERE,
                    coordinate=SolutionCoordinate(0, 0, 0)
                )
                obj_data.dimensions.radius = self.params.get('radius', 5.0)
                volume = obj_data.dimensions.get_volume_sphere()
                
            elif self.object_type == "cylinder":
                obj_data = SolutionDataUtils.create_minimal_solution_data(
                    name=self.name,
                    solution_type=SolutionType.CYLINDER,
                    coordinate=SolutionCoordinate(0, 0, 0)
                )
                obj_data.dimensions.radius = self.params.get('radius', 5.0)
                obj_data.dimensions.height = self.params.get('height', 10.0)
                volume = obj_data.dimensions.get_volume_cylinder()
                
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: {self.object_type}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
            material_name = self.params.get('material', 'Steel')
            material_density = self.params.get('density', 7.85)
            obj_data.properties.material = SolutionMaterial(name=material_name, density=material_density)
            
            self.log_signal.emit(f"‚úÖ –°–æ–∑–¥–∞–Ω {obj_data.properties.name} - –æ–±—ä–µ–º: {volume:.2f} –∫—É–±.–µ–¥.")
            self.log_signal.emit(f"   –ú–∞—Ç–µ—Ä–∏–∞–ª: {material_name} (–ø–ª–æ—Ç–Ω–æ—Å—Ç—å: {material_density})")
            self.finished_signal.emit(True, f"–û–±—ä–µ–∫—Ç {self.name} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞: {e}")
            self.finished_signal.emit(False, f"–û—à–∏–±–∫–∞: {e}")

class TheSolution3DMainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ 3D-Solution"""
    
    def __init__(self):
        super().__init__()
        self.workers = []  # –•—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ç–æ–∫–∏
        self.objects_list = []  # –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        self.load_ui()
        self.setup_connections()
        self.create_sample_objects()
        self.log_message("üöÄ 3D-Solution GUI –∑–∞–ø—É—â–µ–Ω")
    
    def load_ui(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ UI –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            ui_file = Path(__file__).parent / "Gui" / "3D-solution_main.ui"
            if not ui_file.exists():
                raise FileNotFoundError(f"UI —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {ui_file}")
            
            loader = QUiLoader()
            self.ui = loader.load(str(ui_file))
            
            if not self.ui:
                raise RuntimeError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ UI —Ñ–∞–π–ª–∞")
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ UI
            for attr_name in dir(self.ui):
                if not attr_name.startswith('_'):
                    setattr(self, attr_name, getattr(self.ui, attr_name))
            
            self.setCentralWidget(self.ui.centralwidget)
            self.setWindowTitle("TheSolution CAD - 3D-Solution")
            self.resize(1400, 900)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
            self.setup_styles()
            
        except Exception as e:
            QMessageBox.critical(None, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å UI: {e}")
            sys.exit(1)
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        self.setStyleSheet("""
            QMainWindow {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #2c3e50, stop:1 #34495e);
                color: white;
            }
            
            QTreeWidget {
                background: rgba(44, 62, 80, 0.9);
                border: 2px solid #34495e;
                border-radius: 8px;
                color: white;
                font-size: 13px;
            }
            
            QTreeWidget::item {
                padding: 8px;
                border-bottom: 1px solid #34495e;
            }
            
            QTreeWidget::item:selected {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #3498db, stop:1 #2980b9);
            }
            
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #3498db, stop:1 #2980b9);
                border: 2px solid #2980b9;
                border-radius: 8px;
                color: white;
                font-weight: bold;
                padding: 8px;
                font-size: 12px;
            }
            
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #5dade2, stop:1 #3498db);
                border: 2px solid #5dade2;
            }
            
            QTextEdit {
                background: rgba(44, 62, 80, 0.9);
                border: 2px solid #34495e;
                border-radius: 8px;
                color: white;
                font-family: "Consolas", monospace;
                font-size: 12px;
            }
            
            QLabel {
                color: white;
                font-weight: bold;
            }
        """)
    
    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –ö–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        if hasattr(self, 'createBoxButton'):
            self.createBoxButton.clicked.connect(lambda: self.create_object_dialog("box"))
        if hasattr(self, 'createSphereButton'):
            self.createSphereButton.clicked.connect(lambda: self.create_object_dialog("sphere"))
        if hasattr(self, 'createCylinderButton'):
            self.createCylinderButton.clicked.connect(lambda: self.create_object_dialog("cylinder"))
        
        # –ö–Ω–æ–ø–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        if hasattr(self, 'deleteObjectButton'):
            self.deleteObjectButton.clicked.connect(self.delete_selected_object)
        if hasattr(self, 'exportButton'):
            self.exportButton.clicked.connect(self.export_objects)
        if hasattr(self, 'importButton'):
            self.importButton.clicked.connect(self.import_objects)
    
    def create_sample_objects(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
        try:
            from solution_data_types import SolutionType, SolutionDataUtils, SolutionCoordinate, SolutionMaterial
            
            # –°–æ–∑–¥–∞–µ–º –∫—É–±
            box = SolutionDataUtils.create_minimal_solution_data(
                name="–ü—Ä–∏–º–µ—Ä–Ω—ã–π –ö—É–±",
                solution_type=SolutionType.BOX,
                coordinate=SolutionCoordinate(0, 0, 0)
            )
            box.dimensions.width = 10.0
            box.dimensions.height = 10.0
            box.dimensions.depth = 10.0
            box.properties.material = SolutionMaterial(name="Steel", density=7.85)
            self.objects_list.append(box)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ñ–µ—Ä—É
            sphere = SolutionDataUtils.create_minimal_solution_data(
                name="–ü—Ä–∏–º–µ—Ä–Ω–∞—è –°—Ñ–µ—Ä–∞",
                solution_type=SolutionType.SPHERE,
                coordinate=SolutionCoordinate(15, 0, 0)
            )
            sphere.dimensions.radius = 5.0
            sphere.properties.material = SolutionMaterial(name="Aluminum", density=2.7)
            self.objects_list.append(sphere)
            
            # –°–æ–∑–¥–∞–µ–º —Ü–∏–ª–∏–Ω–¥—Ä
            cylinder = SolutionDataUtils.create_minimal_solution_data(
                name="–ü—Ä–∏–º–µ—Ä–Ω—ã–π –¶–∏–ª–∏–Ω–¥—Ä",
                solution_type=SolutionType.CYLINDER,
                coordinate=SolutionCoordinate(0, 15, 0)
            )
            cylinder.dimensions.radius = 3.0
            cylinder.dimensions.height = 8.0
            cylinder.properties.material = SolutionMaterial(name="Copper", density=8.96)
            self.objects_list.append(cylinder)
            
            self.update_objects_tree()
            self.log_message("‚úÖ –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {e}")
    
    def update_objects_tree(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤"""
        try:
            from solution_data_types import SolutionType
            
            if hasattr(self, 'solutionTree'):
                self.solutionTree.clear()
                
                for obj in self.objects_list:
                    item = QTreeWidgetItem(self.solutionTree)
                    item.setText(0, obj.properties.name)
                    item.setText(1, obj.properties.solution_type.value)
                    item.setText(2, f"ID: {obj.properties.index.numeric_id}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ –∫–∞–∫ tooltip
                    material_info = f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {obj.properties.material.name}\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {obj.properties.material.density}"
                    item.setToolTip(0, material_info)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                    if obj.properties.solution_type == SolutionType.BOX:
                        item.setBackground(0, Qt.blue)
                    elif obj.properties.solution_type == SolutionType.SPHERE:
                        item.setBackground(0, Qt.green)
                    elif obj.properties.solution_type == SolutionType.CYLINDER:
                        item.setBackground(0, Qt.yellow)
                
                self.log_message(f"üìã –î–µ—Ä–µ–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {len(self.objects_list)} –æ–±—ä–µ–∫—Ç–æ–≤")
                
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞: {e}")
    
    def create_object_dialog(self, object_type):
        """–î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
            name, ok = QFileDialog.getSaveFileName(
                self, 
                f"–°–æ–∑–¥–∞—Ç—å {object_type}", 
                f"–ù–æ–≤—ã–π_{object_type}",
                "All Files (*)"
            )
            
            if ok and name:
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                params = {
                    'box': {'width': 10.0, 'height': 10.0, 'depth': 10.0, 'material': 'Steel', 'density': 7.85},
                    'sphere': {'radius': 5.0, 'material': 'Aluminum', 'density': 2.7},
                    'cylinder': {'radius': 3.0, 'height': 8.0, 'material': 'Copper', 'density': 8.96}
                }
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                worker = ObjectCreationWorker(object_type, name, params[object_type])
                worker.log_signal.connect(self.log_message)
                worker.finished_signal.connect(self.on_object_created)
                
                self.workers.append(worker)
                worker.start()
                
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
    
    def on_object_created(self, success, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
        if success:
            self.log_message(f"‚úÖ {message}")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–æ–∫ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ
        else:
            self.log_message(f"‚ùå {message}")
    
    def delete_selected_object(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞"""
        try:
            if hasattr(self, 'solutionTree'):
                current_item = self.solutionTree.currentItem()
                if current_item:
                    object_name = current_item.text(0)
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
                    self.log_message(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: {object_name}")
                else:
                    self.log_message("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
    
    def export_objects(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ–±—ä–µ–∫—Ç–æ–≤"""
        try:
            filename, _ = QFileDialog.getSaveFileName(
                self, 
                "–≠–∫—Å–ø–æ—Ä—Ç –æ–±—ä–µ–∫—Ç–æ–≤", 
                "thesolution_objects.json",
                "JSON Files (*.json)"
            )
            if filename:
                self.log_message(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –≤: {filename}")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    def import_objects(self):
        """–ò–º–ø–æ—Ä—Ç –æ–±—ä–µ–∫—Ç–æ–≤"""
        try:
            filename, _ = QFileDialog.getOpenFileName(
                self, 
                "–ò–º–ø–æ—Ä—Ç –æ–±—ä–µ–∫—Ç–æ–≤", 
                "",
                "JSON Files (*.json)"
            )
            if filename:
                self.log_message(f"üì• –ò–º–ø–æ—Ä—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑: {filename}")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    
    def log_message(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        try:
            if hasattr(self, 'logTextEdit'):
                timestamp = datetime.now().strftime("%H:%M:%S")
                log_entry = f"[{timestamp}] {message}"
                
                self.logTextEdit.append(log_entry)
                
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ü—É
                scrollbar = self.logTextEdit.verticalScrollBar()
                scrollbar.setValue(scrollbar.maximum())
            else:
                print(message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
        for worker in self.workers:
            if worker.isRunning():
                worker.terminate()
                worker.wait()
        
        event.accept()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ 3D-Solution GUI...")
    
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    
    window = TheSolution3DMainWindow()
    window.show()
    
    print("‚úÖ 3D-Solution GUI –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –ø–æ–∫–∞–∑–∞–Ω–æ")
    print("üì± –ò—â–∏—Ç–µ –æ–∫–Ω–æ 'TheSolution CAD - 3D-Solution' –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
    
    sys.exit(app.exec())

if __name__ == "__main__":
    main()
