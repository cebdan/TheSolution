#!/usr/bin/env python3
"""
TheSolution CAD System Capabilities Demonstration

Shows all main functions and components of the system
"""

import sys
import os
from datetime import datetime

# Add project modules path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'Base Solution', 'python'))

def print_header():
    """Print demonstration header"""
    print("=" * 60)
    print("üöÄ TheSolution CAD - Capabilities Demonstration")
    print("=" * 60)
    print(f"Start time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

def demo_basic_system():
    """Demonstrate basic system"""
    print("üìã 1. Basic Solution System")
    print("-" * 40)
    
    try:
        from solution_coordinate import SolutionCoordinate
        from base_solution import Solution
        
        # Create coordinates
        coord1 = SolutionCoordinate(10, 20, 30)
        coord2 = SolutionCoordinate(5, 5, 5, 2.0, 1.5, 0.5)
        
        print(f"‚úÖ Coordinates created:")
        print(f"   Coordinates 1: {coord1}")
        print(f"   Coordinates 2: {coord2}")
        
        # Create objects
        root = Solution("Root object", coord1)
        child1 = Solution("Child 1", coord2)
        child2 = Solution("Child 2", SolutionCoordinate(0, 10, 0))
        
        # Build hierarchy
        root.add_child(child1)
        root.add_child(child2)
        
        print(f"‚úÖ Hierarchy created:")
        print(f"   Root object: {root.name}")
        print(f"   Child elements: {len(root.get_children())}")
        print(f"   Total descendants: {len(root.get_descendants())}")
        
        # Work with coordinates
        child1.x = 50
        abs_coord = child1.get_absolute_coordinate()
        print(f"‚úÖ Coordinates updated:")
        print(f"   New coordinates child1: x={child1.x}")
        print(f"   Absolute coordinates: {abs_coord}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Basic system error: {e}")
        return False

def demo_geometry():
    """Demonstrate geometric operations"""
    print("\nüìê 2. Geometric Operations")
    print("-" * 40)
    
    try:
        from geometry_operations import GeometryOperations, SolutionCoordinate
        
        # Create geometric objects
        box = GeometryOperations.create_box("Demo cube", 10, 10, 10, SolutionCoordinate(0, 0, 0))
        sphere = GeometryOperations.create_sphere("Demo sphere", 5, SolutionCoordinate(15, 0, 0))
        cylinder = GeometryOperations.create_cylinder("Demo cylinder", 3, 8, SolutionCoordinate(0, 15, 0))
        
        print(f"‚úÖ Geometric objects created:")
        print(f"   Cube volume: {box.get_volume():.2f}")
        print(f"   Sphere volume: {sphere.get_volume():.2f}")
        print(f"   Cylinder volume: {cylinder.get_volume():.2f}")
        
        # Create assembly
        assembly = Solution("Demo assembly")
        assembly.add_child(box)
        assembly.add_child(sphere)
        assembly.add_child(cylinder)
        
        print(f"‚úÖ Assembly created:")
        print(f"   Components: {len(assembly.get_children())}")
        print(f"   Total volume: {sum(child.get_volume() for child in assembly.get_children()):.2f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Geometry error: {e}")
        return False

def demo_gui():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç GUI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    print("\nüñ•Ô∏è 3. GUI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    print("-" * 40)
    
    try:
        from PySide6.QtWidgets import QApplication
        from PySide6.QtCore import Qt
        
        print("‚úÖ PySide6 –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("‚úÖ GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã")
        print("   - –î–µ—Ä–µ–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤")
        print("   - –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
        print("   - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å")
        print("   - –ö–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤")
        
        return True
        
    except ImportError:
        print("‚ö†Ô∏è PySide6 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GUI: {e}")
        return False

def demo_opencascade():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ OpenCASCADE"""
    print("\nüîß 4. OpenCASCADE –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
    print("-" * 40)
    
    try:
        from OCC.Core.BRepPrimAPI import BRepPrimAPI_MakeBox
        from OCC.Core.BRepGProp import brepgprop_VolumeProperties
        from OCC.Core.GProp import GProp_GProps
        
        print("‚úÖ OpenCASCADE –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É–±–∞ —á–µ—Ä–µ–∑ OpenCASCADE
        box_maker = BRepPrimAPI_MakeBox(10, 10, 10)
        box_shape = box_maker.Shape()
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
        props = GProp_GProps()
        brepgprop_VolumeProperties(box_shape, props)
        volume = props.Mass()
        
        print(f"‚úÖ OpenCASCADE –æ–ø–µ—Ä–∞—Ü–∏–∏:")
        print(f"   –ö—É–± —Å–æ–∑–¥–∞–Ω: {box_shape}")
        print(f"   –û–±—ä–µ–º: {volume:.2f}")
        
        return True
        
    except ImportError:
        print("‚ö†Ô∏è OpenCASCADE –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: conda install -c conda-forge pythonocc-core")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenCASCADE: {e}")
        return False

def demo_project_structure():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüìÅ 5. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞")
    print("-" * 40)
    
    import os
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    directories = [
        "Base Solution",
        "Base Solution/python",
        "Base Solution/include",
        "Graphic Engine",
        "Geometric Primitives",
        "Modeling Tools",
        "Layers",
        "Dimensions",
        "GUI",
        "Tests",
        "Documentation",
        "Build",
        "Examples"
    ]
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
    for directory in directories:
        if os.path.exists(directory):
            print(f"   ‚úÖ {directory}/")
        else:
            print(f"   ‚ö†Ô∏è {directory}/ (–Ω–µ —Å–æ–∑–¥–∞–Ω–∞)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    files = [
        "README.md",
        "requirements.txt",
        "CMakeLists.txt",
        "setup_environment.py",
        "INSTALL.md",
        "Base Solution/python/solution_coordinate.py",
        "Base Solution/python/base_solution.py",
        "Base Solution/include/solution_coordinate.h",
        "test_basic_system.py",
        "simple_gui.py",
        "geometry_operations.py"
    ]
    
    print("\n‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    for file in files:
        if os.path.exists(file):
            print(f"   ‚úÖ {file}")
        else:
            print(f"   ‚ùå {file} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
    
    return True

def demo_installation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("\nüîß 6. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("-" * 40)
    
    import os
    
    tools = [
        "setup_environment.py",
        "check_conda_environment.py",
        "quick_check_opencascade.py",
        "run_with_opencascade.py"
    ]
    
    print("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
    for tool in tools:
        if os.path.exists(tool):
            print(f"   ‚úÖ {tool}")
        else:
            print(f"   ‚ùå {tool} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
    
    return True

def print_summary(results):
    """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê")
    print("=" * 60)
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
    print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
    
    print("\nüéØ –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    components = [
        ("–ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞", results.get("basic", False)),
        ("–ì–µ–æ–º–µ—Ç—Ä–∏—è", results.get("geometry", False)),
        ("GUI", results.get("gui", False)),
        ("OpenCASCADE", results.get("opencascade", False)),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", results.get("structure", False)),
        ("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏", results.get("installation", False))
    ]
    
    for name, status in components:
        icon = "‚úÖ" if status else "‚ùå"
        print(f"   {icon} {name}")
    
    print("\nüöÄ TheSolution CAD –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ GUI: python simple_gui.py")
    print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É: python test_basic_system.py")
    print("3. –ò–∑—É—á–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: README.md, INSTALL.md")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print_header()
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π
    results = {
        "basic": demo_basic_system(),
        "geometry": demo_geometry(),
        "gui": demo_gui(),
        "opencascade": demo_opencascade(),
        "structure": demo_project_structure(),
        "installation": demo_installation()
    }
    
    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏
    print_summary(results)

if __name__ == "__main__":
    main()
