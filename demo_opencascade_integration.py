#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OpenCASCADE —Å TheSolution CAD
"""

import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def demo_basic_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OpenCASCADE —Å TheSolution CAD")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        from solution_data_types import SolutionType, SolutionDataUtils, SolutionCoordinate
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ò–º–ø–æ—Ä—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OpenCASCADE
        from opencascade_integration import OpenCascadeIntegration
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è OpenCASCADE –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        integration = OpenCascadeIntegration()
        
        if not integration.occ_available:
            print("‚ùå OpenCASCADE –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        print("‚úÖ OpenCASCADE –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ 3D –æ–±—ä–µ–∫—Ç–æ–≤:")
        
        # 1. –ö—É–±
        print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ –∫—É–±–∞...")
        cube_data = SolutionDataUtils.create_minimal_solution_data(
            name="–î–µ–º–æ-–∫—É–±",
            solution_type=SolutionType.BOX,
            coordinate=SolutionCoordinate(0, 0, 0)
        )
        cube_data.dimensions.width = 15.0
        cube_data.dimensions.height = 10.0
        cube_data.dimensions.depth = 8.0
        
        cube_result = integration.integrate_with_solution_data(cube_data)
        if cube_result:
            print(f"   ‚úÖ –ö—É–± —Å–æ–∑–¥–∞–Ω: {cube_data.properties.name}")
            print(f"   üìä –†–∞–∑–º–µ—Ä—ã: {cube_data.dimensions.width}√ó{cube_data.dimensions.height}√ó{cube_data.dimensions.depth}")
            print(f"   üìè –û–±—ä–µ–º: {cube_result['volume']:.2f}")
        
        # 2. –°—Ñ–µ—Ä–∞
        print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã...")
        sphere_data = SolutionDataUtils.create_minimal_solution_data(
            name="–î–µ–º–æ-—Å—Ñ–µ—Ä–∞",
            solution_type=SolutionType.SPHERE,
            coordinate=SolutionCoordinate(25, 0, 0)
        )
        sphere_data.dimensions.radius = 7.0
        
        sphere_result = integration.integrate_with_solution_data(sphere_data)
        if sphere_result:
            print(f"   ‚úÖ –°—Ñ–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {sphere_data.properties.name}")
            print(f"   üìä –†–∞–¥–∏—É—Å: {sphere_data.dimensions.radius}")
            print(f"   üìè –û–±—ä–µ–º: {sphere_result['volume']:.2f}")
        
        # 3. –¶–∏–ª–∏–Ω–¥—Ä
        print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–∞...")
        cylinder_data = SolutionDataUtils.create_minimal_solution_data(
            name="–î–µ–º–æ-—Ü–∏–ª–∏–Ω–¥—Ä",
            solution_type=SolutionType.CYLINDER,
            coordinate=SolutionCoordinate(50, 0, 0)
        )
        cylinder_data.dimensions.radius = 4.0
        cylinder_data.dimensions.height = 12.0
        
        cylinder_result = integration.integrate_with_solution_data(cylinder_data)
        if cylinder_result:
            print(f"   ‚úÖ –¶–∏–ª–∏–Ω–¥—Ä —Å–æ–∑–¥–∞–Ω: {cylinder_data.properties.name}")
            print(f"   üìä –†–∞–¥–∏—É—Å: {cylinder_data.dimensions.radius}, –í—ã—Å–æ—Ç–∞: {cylinder_data.dimensions.height}")
            print(f"   üìè –û–±—ä–µ–º: {cylinder_result['volume']:.2f}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
        print("\nüîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π:")
        
        if cube_result and 'occ_shape' in cube_result:
            # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É–±–∞
            moved_shape = integration.transform_shape(
                cube_result['occ_shape'],
                translation=(10, 5, 3)
            )
            if moved_shape:
                print("   ‚úÖ –ö—É–± –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ (10, 5, 3)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
        print(f"   ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: 3")
        print(f"   ‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: {cube_result['volume'] + sphere_result['volume'] + cylinder_result['volume']:.2f}")
        print(f"   ‚Ä¢ OpenCASCADE —Ñ–æ—Ä–º—ã: {sum(1 for r in [cube_result, sphere_result, cylinder_result] if r and 'occ_shape' in r)}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

def demo_gui_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GUI"""
    print("\nüé® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GUI:")
    print("=" * 40)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PySide6
        from PySide6.QtWidgets import QApplication
        print("‚úÖ PySide6 –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OpenCASCADE
        from opencascade_integration import OpenCascadeIntegration
        integration = OpenCascadeIntegration()
        
        if integration.occ_available:
            print("‚úÖ OpenCASCADE –≥–æ—Ç–æ–≤ –¥–ª—è GUI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: conda run -n pythonocc python 3d_solution_gui.py")
        else:
            print("‚ùå OpenCASCADE –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è GUI")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå PySide6 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def demo_file_operations():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏"""
    print("\nüìÅ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏:")
    print("=" * 40)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
        filename = f"demo_objects_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("TheSolution CAD - Demo Objects\n")
            f.write("=" * 30 + "\n\n")
            f.write("–°–æ–∑–¥–∞–Ω–æ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π OpenCASCADE\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            # –î–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–æ–≤
            objects_data = [
                {"name": "–î–µ–º–æ-–∫—É–±", "type": "BOX", "volume": 1200.0},
                {"name": "–î–µ–º–æ-—Å—Ñ–µ—Ä–∞", "type": "SPHERE", "volume": 1436.8},
                {"name": "–î–µ–º–æ-—Ü–∏–ª–∏–Ω–¥—Ä", "type": "CYLINDER", "volume": 603.2}
            ]
            
            for obj in objects_data:
                f.write(f"–û–±—ä–µ–∫—Ç: {obj['name']}\n")
                f.write(f"–¢–∏–ø: {obj['type']}\n")
                f.write(f"–û–±—ä–µ–º: {obj['volume']:.2f}\n")
                f.write("-" * 20 + "\n\n")
        
        print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ TheSolution CAD - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è OpenCASCADE –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 70)
    
    success_count = 0
    total_demos = 3
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    if demo_basic_integration():
        success_count += 1
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: GUI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    if demo_gui_integration():
        success_count += 1
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
    if demo_file_operations():
        success_count += 1
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 70)
    print("üìã –ò–¢–û–ì–ò –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_demos}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {total_demos - success_count}")
    
    if success_count == total_demos:
        print("\nüéâ –í–°–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üöÄ OpenCASCADE –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å TheSolution CAD")
    else:
        print(f"\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ {total_demos - success_count} –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è—Ö")
    
    print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ GUI: conda run -n pythonocc python 3d_solution_gui.py")
    print("   2. –°–æ–∑–¥–∞–π—Ç–µ 3D –æ–±—ä–µ–∫—Ç—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("   3. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Ñ–∞–π–ª")
    print("   4. –ò–∑—É—á–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ OpenCASCADE —Ñ–æ—Ä–º—ã")

if __name__ == "__main__":
    main()
