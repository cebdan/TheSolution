#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Root Solution –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã TheSolution CAD
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ—à–µ–Ω–∏–π –∏ 3D-Solution
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "Base Solution" / "python"))
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "Root Solution" / "python"))

def demo_root_solution_manager():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Root Solution Manager"""
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ROOT SOLUTION MANAGER")
    print("=" * 50)
    
    try:
        from root_solution_manager import get_root_manager, SolutionStatus
        
        manager = get_root_manager()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ—à–µ–Ω–∏—è
        print("üìã –í—Å–µ —Ä–µ—à–µ–Ω–∏—è TheSolution CAD:")
        solutions_info = manager.get_all_solutions_info()
        for name, info in solutions_info.items():
            status_icon = "‚úÖ" if info["status"] == "active" else "‚è∏Ô∏è"
            print(f"   {status_icon} {name}: {info['description']}")
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—à–µ–Ω–∏–π
        print("\nüîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π:")
        manager.activate_solution("2D-Solution")
        manager.activate_solution("Assembly-Solution")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
        active_solutions = manager.get_active_solutions()
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π: {len(active_solutions)}")
        for solution in active_solutions:
            print(f"   - {solution.name}: {solution.description}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return False

def demo_solution_data_types():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –¢–ò–ü–û–í –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    try:
        from solution_data_types import (
            SolutionType, SolutionDataUtils, SolutionData,
            SolutionCoordinate, SolutionDimensions, SolutionMaterial
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤
        objects = []
        
        # –ö—É–±
        box_data = SolutionDataUtils.create_minimal_solution_data(
            name="–î–µ–º–æ –ö—É–±",
            solution_type=SolutionType.BOX,
            coordinate=SolutionCoordinate(0, 0, 0)
        )
        box_data.dimensions.width = 10.0
        box_data.dimensions.height = 10.0
        box_data.dimensions.depth = 10.0
        box_data.properties.material = SolutionMaterial(
            name="Steel",
            density=7.85,
            color_rgb=(192, 192, 192)
        )
        objects.append(box_data)
        
        # –°—Ñ–µ—Ä–∞
        sphere_data = SolutionDataUtils.create_minimal_solution_data(
            name="–î–µ–º–æ –°—Ñ–µ—Ä–∞",
            solution_type=SolutionType.SPHERE,
            coordinate=SolutionCoordinate(15, 0, 0)
        )
        sphere_data.dimensions.radius = 5.0
        sphere_data.properties.material = SolutionMaterial(
            name="Aluminum",
            density=2.7,
            color_rgb=(169, 169, 169)
        )
        objects.append(sphere_data)
        
        # –¶–∏–ª–∏–Ω–¥—Ä
        cylinder_data = SolutionDataUtils.create_minimal_solution_data(
            name="–î–µ–º–æ –¶–∏–ª–∏–Ω–¥—Ä",
            solution_type=SolutionType.CYLINDER,
            coordinate=SolutionCoordinate(0, 15, 0)
        )
        cylinder_data.dimensions.radius = 3.0
        cylinder_data.dimensions.height = 8.0
        cylinder_data.properties.material = SolutionMaterial(
            name="Copper",
            density=8.96,
            color_rgb=(184, 115, 51)
        )
        objects.append(cylinder_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö
        print("üìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:")
        for obj in objects:
            coord = obj.properties.coordinate
            material = obj.properties.material
            
            print(f"\nüî∏ {obj.properties.name}:")
            print(f"   –¢–∏–ø: {obj.properties.solution_type.value}")
            print(f"   –ü–æ–∑–∏—Ü–∏—è: ({coord.x}, {coord.y}, {coord.z})")
            print(f"   –ú–∞—Ç–µ—Ä–∏–∞–ª: {material.name} (–ø–ª–æ—Ç–Ω–æ—Å—Ç—å: {material.density})")
            
            # –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞
            if obj.properties.solution_type == SolutionType.BOX:
                volume = obj.dimensions.get_volume_box()
                print(f"   –û–±—ä–µ–º: {volume:.2f} –∫—É–±.–µ–¥.")
            elif obj.properties.solution_type == SolutionType.SPHERE:
                volume = obj.dimensions.get_volume_sphere()
                print(f"   –û–±—ä–µ–º: {volume:.2f} –∫—É–±.–µ–¥.")
            elif obj.properties.solution_type == SolutionType.CYLINDER:
                volume = obj.dimensions.get_volume_cylinder()
                print(f"   –û–±—ä–µ–º: {volume:.2f} –∫—É–±.–µ–¥.")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def demo_3d_solution_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ 3D-Solution"""
    print("\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò 3D-SOLUTION")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ 3D-Solution
        main_3d_path = project_root / "Root Solution" / "3D-Solution" / "main_3d.py"
        if main_3d_path.exists():
            print("‚úÖ 3D-Solution –Ω–∞–π–¥–µ–Ω")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            import os
            file_size = os.path.getsize(main_3d_path)
            print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞ GUI)
            import importlib.util
            spec = importlib.util.spec_from_file_location("main_3d", main_3d_path)
            main_3d_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(main_3d_module)
            
            print("‚úÖ –ú–æ–¥—É–ª—å 3D-Solution –∑–∞–≥—Ä—É–∂–µ–Ω")
            print("   –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
            print("   - launch_3d_solution() - –∑–∞–ø—É—Å–∫ 3D-Solution")
            print("   - Solution3DMainWindow - –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ")
            
            return True
        else:
            print("‚ùå 3D-Solution –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ 3D-Solution: {e}")
        return False

def demo_hierarchy():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ä–µ—à–µ–Ω–∏–π"""
    print("\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ï–†–ê–†–•–ò–ò –†–ï–®–ï–ù–ò–ô")
    print("=" * 50)
    
    try:
        from root_solution_manager import get_root_manager
        
        manager = get_root_manager()
        hierarchy = manager.create_solution_hierarchy()
        
        print(f"üèóÔ∏è –ö–æ—Ä–µ–Ω—å –∏–µ—Ä–∞—Ä—Ö–∏–∏: {hierarchy['root']}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π: {len(hierarchy['solutions'])}")
        
        print("\nüìÅ –î–µ—Ç–∞–ª–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏:")
        for name, data in hierarchy['solutions'].items():
            info = data['info']
            sub_count = len(data['sub_solutions'])
            status_icon = "‚úÖ" if info['status'] == 'active' else "‚è∏Ô∏è"
            
            print(f"   {status_icon} {name}:")
            print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")
            print(f"      –¢–∏–ø: {info['type']}")
            print(f"      –ü–æ–¥-—Ä–µ—à–µ–Ω–∏—è: {sub_count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üèóÔ∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ROOT SOLUTION –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´")
    print("TheSolution CAD - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ CAD —Ä–µ—à–µ–Ω–∏–π")
    print("=" * 70)
    
    demos = [
        ("Root Solution Manager", demo_root_solution_manager),
        ("–°–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö", demo_solution_data_types),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è 3D-Solution", demo_3d_solution_integration),
        ("–ò–µ—Ä–∞—Ä—Ö–∏—è —Ä–µ—à–µ–Ω–∏–π", demo_hierarchy)
    ]
    
    results = []
    
    for demo_name, demo_func in demos:
        try:
            result = demo_func()
            results.append((demo_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ {demo_name}: {e}")
            results.append((demo_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
    print("=" * 70)
    
    passed = 0
    total = len(results)
    
    for demo_name, result in results:
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status} {demo_name}")
        if result:
            passed += 1
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("Root Solution –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ—à–ª–∏.")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.")
    
    print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Root Solution Launcher: python 'Root Solution/main.py'")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 3D-Solution: python 'Root Solution/3D-Solution/main_3d.py'")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: python test_root_solution.py")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
