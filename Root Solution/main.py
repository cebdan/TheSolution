#!/usr/bin/env python3
"""
Root Solution - –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—é—â–∏–π —Ñ–∞–π–ª TheSolution CAD
–£–ø—Ä–∞–≤–ª—è–µ—Ç 8 –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ 3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / "Base Solution" / "python"))
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "Root Solution" / "python"))

try:
    from PySide6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QWidget, QPushButton, QLabel, QTextEdit, QTreeWidget, QTreeWidgetItem
    from PySide6.QtCore import Qt
    from PySide6.QtGui import QFont
except ImportError:
    print("‚ùå PySide6 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    sys.exit(1)

try:
    from root_solution_manager import get_root_manager, SolutionStatus
    from solution_data_types import SolutionType
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

class RootSolutionLauncher(QMainWindow):
    """
    –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ Root Solution Launcher
    –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ TheSolution CAD
    """
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("TheSolution CAD - Root Solution Launcher")
        self.setGeometry(100, 100, 1200, 800)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        self.root_manager = get_root_manager()
        
        self.setup_ui()
        self.load_solutions_info()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        main_layout = QHBoxLayout(central_widget)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —Ä–µ—à–µ–Ω–∏–π
        left_panel = self.create_left_panel()
        main_layout.addWidget(left_panel, 1)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        center_panel = self.create_center_panel()
        main_layout.addWidget(center_panel, 2)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç—É—Å –∏ –ª–æ–≥–∏
        right_panel = self.create_right_panel()
        main_layout.addWidget(right_panel, 1)
    
    def create_left_panel(self):
        """–õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ—à–µ–Ω–∏–π"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("Root Solutions")
        title.setFont(QFont("Arial", 16, QFont.Bold))
        layout.addWidget(title)
        
        # –î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π
        self.solutions_tree = QTreeWidget()
        self.solutions_tree.setHeaderLabels(["–†–µ—à–µ–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å", "–¢–∏–ø"])
        self.solutions_tree.itemClicked.connect(self.on_solution_selected)
        layout.addWidget(self.solutions_tree)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        layout.addWidget(QLabel("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"))
        
        btn_launch_3d = QPushButton("üöÄ Launch 3D-Solution")
        btn_launch_3d.clicked.connect(self.launch_3d_solution)
        layout.addWidget(btn_launch_3d)
        
        btn_refresh = QPushButton("üîÑ Refresh")
        btn_refresh.clicked.connect(self.load_solutions_info)
        layout.addWidget(btn_refresh)
        
        return widget
    
    def create_center_panel(self):
        """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—à–µ–Ω–∏–∏")
        title.setFont(QFont("Arial", 14, QFont.Bold))
        layout.addWidget(title)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏
        self.solution_info = QTextEdit()
        self.solution_info.setReadOnly(True)
        self.solution_info.setMaximumHeight(200)
        layout.addWidget(self.solution_info)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–µ–º
        layout.addWidget(QLabel("–î–µ–π—Å—Ç–≤–∏—è:"))
        
        btn_activate = QPushButton("‚úÖ Activate")
        btn_activate.clicked.connect(self.activate_selected_solution)
        layout.addWidget(btn_activate)
        
        btn_deactivate = QPushButton("‚è∏Ô∏è Deactivate")
        btn_deactivate.clicked.connect(self.deactivate_selected_solution)
        layout.addWidget(btn_deactivate)
        
        layout.addStretch()
        
        return widget
    
    def create_right_panel(self):
        """–ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        title.setFont(QFont("Arial", 14, QFont.Bold))
        layout.addWidget(title)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_text = QTextEdit()
        self.status_text.setReadOnly(True)
        layout.addWidget(self.status_text)
        
        return widget
    
    def load_solutions_info(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—à–µ–Ω–∏—è—Ö"""
        self.solutions_tree.clear()
        
        solutions_info = self.root_manager.get_all_solutions_info()
        
        for name, info in solutions_info.items():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
            status_icon = "‚úÖ" if info["status"] == "active" else "‚è∏Ô∏è"
            
            item = QTreeWidgetItem([
                name,
                f"{status_icon} {info['status']}",
                info["type"]
            ])
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            item.setData(0, Qt.UserRole, name)
            
            self.solutions_tree.addTopLevelItem(item)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.update_status()
    
    def on_solution_selected(self, item, column):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—à–µ–Ω–∏—è"""
        solution_name = item.data(0, Qt.UserRole)
        solution = self.root_manager.get_solution(solution_name)
        
        if solution:
            info = solution.get_info()
            
            info_text = f"""
üéØ –†–µ—à–µ–Ω–∏–µ: {info['name']}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {solution.description}
üîß –¢–∏–ø: {info['type']}
üìä –°—Ç–∞—Ç—É—Å: {info['status']}
üîó –ü–æ–¥-—Ä–µ—à–µ–Ω–∏—è: {info['sub_solutions_count']}

üí° –î–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ 3D-Solution –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
            """
            
            self.solution_info.setText(info_text)
    
    def activate_selected_solution(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
        current_item = self.solutions_tree.currentItem()
        if current_item:
            solution_name = current_item.data(0, Qt.UserRole)
            if self.root_manager.activate_solution(solution_name):
                self.load_solutions_info()
                self.update_status()
                print(f"‚úÖ –†–µ—à–µ–Ω–∏–µ {solution_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
    
    def deactivate_selected_solution(self):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
        current_item = self.solutions_tree.currentItem()
        if current_item:
            solution_name = current_item.data(0, Qt.UserRole)
            if self.root_manager.deactivate_solution(solution_name):
                self.load_solutions_info()
                self.update_status()
                print(f"‚è∏Ô∏è –†–µ—à–µ–Ω–∏–µ {solution_name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
    
    def launch_3d_solution(self):
        """–ó–∞–ø—É—Å–∫ 3D-Solution"""
        print("üéØ –ó–∞–ø—É—Å–∫ 3D-Solution...")
        
        try:
            # –ò–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫ 3D-Solution
            sys.path.insert(0, str(project_root / "Root Solution" / "3D-Solution"))
            from main_3d import launch_3d_solution
            
            window = launch_3d_solution()
            if window:
                print("‚úÖ 3D-Solution —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                self.update_status()
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ 3D-Solution")
                
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ 3D-Solution: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    
    def update_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        active_solutions = self.root_manager.get_active_solutions()
        total_solutions = len(self.root_manager.solutions)
        
        status_text = f"""
üèóÔ∏è TheSolution CAD - Root Solution Manager

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–∏–π: {total_solutions}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_solutions)}
‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_solutions - len(active_solutions)}

üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:
‚Ä¢ 3D-Solution: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' if self.root_manager.get_3d_solution() and self.root_manager.get_3d_solution().status == SolutionStatus.ACTIVE else '‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}

üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ –ó–∞–ø—É—Å–∫ 3D-Solution
‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–µ–π

üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """
        
        self.status_text.setText(status_text)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = QApplication.instance()
    if app is None:
        app = QApplication(sys.argv)
    
    print("üèóÔ∏è –ó–∞–ø—É—Å–∫ Root Solution Manager...")
    
    window = RootSolutionLauncher()
    window.show()
    
    return app.exec()

if __name__ == "__main__":
    sys.exit(main())
