#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Root Solution –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã TheSolution CAD
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ—à–µ–Ω–∏–π –∏ 3D-Solution
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "Base Solution" / "python"))
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "Root Solution" / "python"))

def test_root_solution_manager():
    """–¢–µ—Å—Ç Root Solution Manager"""
    print("üß™ –¢–µ—Å—Ç Root Solution Manager")
    print("=" * 50)
    
    try:
        from root_solution_manager import get_root_manager, SolutionStatus
        
        manager = get_root_manager()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—à–µ–Ω–∏–π
        solutions_info = manager.get_all_solutions_info()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–π: {len(solutions_info)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3D-Solution
        solution_3d = manager.get_3d_solution()
        if solution_3d:
            print(f"‚úÖ 3D-Solution –Ω–∞–π–¥–µ–Ω: {solution_3d.name}")
            print(f"   –°—Ç–∞—Ç—É—Å: {solution_3d.status.value}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {solution_3d.description}")
        else:
            print("‚ùå 3D-Solution –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
        active_solutions = manager.get_active_solutions()
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π: {len(active_solutions)}")
        
        # –í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ä–µ—à–µ–Ω–∏–π
        print("\nüìã –í—Å–µ —Ä–µ—à–µ–Ω–∏—è:")
        for name, info in solutions_info.items():
            status_icon = "‚úÖ" if info["status"] == "active" else "‚è∏Ô∏è"
            print(f"   {status_icon} {name}: {info['description']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return False

def test_solution_data_types():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    try:
        from solution_data_types import (
            SolutionType, SolutionDataUtils, SolutionData,
            SolutionCoordinate, SolutionDimensions, SolutionMaterial
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        test_data = SolutionDataUtils.create_minimal_solution_data(
            name="Test Object",
            solution_type=SolutionType.BOX,
            coordinate=SolutionCoordinate(10, 20, 30)
        )
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
        test_data.dimensions.width = 10.0
        test_data.dimensions.height = 20.0
        test_data.dimensions.depth = 5.0
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        test_data.properties.material = SolutionMaterial(
            name="Test Material",
            density=2.5,
            color_rgb=(128, 128, 128)
        )
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        is_valid, errors = SolutionDataUtils.validate_solution_data(test_data)
        
        print(f"‚úÖ –û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {test_data.properties.name}")
        print(f"   –¢–∏–ø: {test_data.properties.solution_type.value}")
        print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {test_data.properties.coordinate.get_position()}")
        print(f"   –†–∞–∑–º–µ—Ä—ã: {test_data.dimensions.width}x{test_data.dimensions.height}x{test_data.dimensions.depth}")
        print(f"   –ú–∞—Ç–µ—Ä–∏–∞–ª: {test_data.properties.material.name}")
        print(f"   –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {'‚úÖ –î–∞' if is_valid else '‚ùå –ù–µ—Ç'}")
        
        if not is_valid:
            print(f"   –û—à–∏–±–∫–∏: {errors}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞
        volume = test_data.dimensions.get_volume_box()
        print(f"   –û–±—ä–µ–º: {volume:.2f} –∫—É–±.–µ–¥.")
        
        return is_valid
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_3d_solution_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ 3D-Solution"""
    print("\nüß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ 3D-Solution")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ 3D-Solution
        sys.path.insert(0, str(project_root / "Root Solution" / "3D-Solution"))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
        main_3d_path = project_root / "Root Solution" / "3D-Solution" / "main_3d.py"
        if main_3d_path.exists():
            print("‚úÖ –§–∞–π–ª main_3d.py –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå –§–∞–π–ª main_3d.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞ GUI)
        try:
            import importlib.util
            spec = importlib.util.spec_from_file_location("main_3d", main_3d_path)
            main_3d_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(main_3d_module)
            print("‚úÖ –ú–æ–¥—É–ª—å main_3d.py –∑–∞–≥—Ä—É–∂–µ–Ω")
        except ImportError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ 3D-Solution: {e}")
            print("   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ PySide6 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ 3D-Solution: {e}")
        return False

def test_root_solution_hierarchy():
    """–¢–µ—Å—Ç –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ä–µ—à–µ–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ä–µ—à–µ–Ω–∏–π")
    print("=" * 50)
    
    try:
        from root_solution_manager import get_root_manager
        
        manager = get_root_manager()
        hierarchy = manager.create_solution_hierarchy()
        
        print(f"‚úÖ –ö–æ—Ä–µ–Ω—å –∏–µ—Ä–∞—Ä—Ö–∏–∏: {hierarchy['root']}")
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π: {len(hierarchy['solutions'])}")
        
        print("\nüìä –î–µ—Ç–∞–ª–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏:")
        for name, data in hierarchy['solutions'].items():
            info = data['info']
            sub_count = len(data['sub_solutions'])
            print(f"   üìÅ {name}: {info['description']} (–ø–æ–¥-—Ä–µ—à–µ–Ω–∏–π: {sub_count})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üèóÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Root Solution –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã TheSolution CAD")
    print("=" * 70)
    
    tests = [
        ("Root Solution Manager", test_root_solution_manager),
        ("–°–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö", test_solution_data_types),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è 3D-Solution", test_3d_solution_integration),
        ("–ò–µ—Ä–∞—Ä—Ö–∏—è —Ä–µ—à–µ–Ω–∏–π", test_root_solution_hierarchy)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 70)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! Root Solution –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
