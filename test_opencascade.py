#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenCASCADE –≤ conda –æ–∫—Ä—É–∂–µ–Ω–∏–∏
"""

import sys
import os

print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenCASCADE...")

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ OpenCASCADE
try:
    from OCC.Core.BRepPrimAPI import BRepPrimAPI_MakeBox, BRepPrimAPI_MakeSphere
    from OCC.Core.BRepAlgoAPI import BRepAlgoAPI_Fuse
    from OCC.Core.BRepBuilderAPI import BRepBuilderAPI_Transform
    from OCC.Core.gp import gp_Pnt, gp_Vec, gp_Trsf
    from OCC.Core.TopoDS import TopoDS_Shape
    from OCC.Core.BRepGProp import brepgprop_VolumeProperties
    from OCC.Core.GProp import GProp_GProps
    
    print("‚úÖ OpenCASCADE —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É–±–∞
    print("üß™ –°–æ–∑–¥–∞–Ω–∏–µ –∫—É–±–∞...")
    box_maker = BRepPrimAPI_MakeBox(10.0, 10.0, 10.0)
    box_shape = box_maker.Shape()
    print(f"‚úÖ –ö—É–± —Å–æ–∑–¥–∞–Ω: {box_shape}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã
    print("üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã...")
    sphere_maker = BRepPrimAPI_MakeSphere(5.0)
    sphere_shape = sphere_maker.Shape()
    print(f"‚úÖ –°—Ñ–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {sphere_shape}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
    print("üß™ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –∫—É–±–∞...")
    props = GProp_GProps()
    brepgprop_VolumeProperties(box_shape, props)
    volume = props.Mass()
    print(f"‚úÖ –û–±—ä–µ–º –∫—É–±–∞: {volume}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
    print("üß™ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∫—É–±–∞...")
    trsf = gp_Trsf()
    trsf.SetTranslation(gp_Vec(10.0, 0.0, 0.0))
    transform = BRepBuilderAPI_Transform(box_shape, trsf)
    transformed_shape = transform.Shape()
    print(f"‚úÖ –ö—É–± –ø–µ—Ä–µ–º–µ—â–µ–Ω: {transformed_shape}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—É–ª–µ–≤—É –æ–ø–µ—Ä–∞—Ü–∏—é
    print("üß™ –ë—É–ª–µ–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è...")
    fuse = BRepAlgoAPI_Fuse(box_shape, sphere_shape)
    if fuse.IsDone():
        union_shape = fuse.Shape()
        print(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {union_shape}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—ä–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        union_props = GProp_GProps()
        brepgprop_VolumeProperties(union_shape, union_props)
        union_volume = union_props.Mass()
        print(f"‚úÖ –û–±—ä–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {union_volume}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—É–ª–µ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏")
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã OpenCASCADE –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("OpenCASCADE –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω –≤ –¥–∞–Ω–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ OpenCASCADE: {e}")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ conda –æ–∫—Ä—É–∂–µ–Ω–∏–∏ —Å OpenCASCADE")
    print("2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: conda activate opencascade")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É: conda list | findstr occ")
    print("4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: conda install -c conda-forge pythonocc-core")

except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ OpenCASCADE: {e}")
    import traceback
    traceback.print_exc()

print(f"\nPython –≤–µ—Ä—Å–∏—è: {sys.version}")
print(f"Python –ø—É—Ç—å: {sys.executable}")
print(f"–ü—É—Ç–∏ –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π:")
for path in sys.path[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø—É—Ç–µ–π
    print(f"  {path}")
