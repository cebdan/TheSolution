#!/usr/bin/env python3
"""
–¢–µ—Å—Ç OpenCASCADE/PythonOCC
"""

def test_opencascade():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenCASCADE"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenCASCADE/PythonOCC")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π...")
    
    try:
        from OCC.Core.BRepPrimAPI import BRepPrimAPI_MakeBox
        print("   ‚úÖ BRepPrimAPI –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ BRepPrimAPI: {e}")
        return False
    
    try:
        from OCC.Core.BRepPrimAPI import BRepPrimAPI_MakeSphere
        print("   ‚úÖ BRepPrimAPI_MakeSphere –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ BRepPrimAPI_MakeSphere: {e}")
        return False
    
    try:
        from OCC.Core.BRepPrimAPI import BRepPrimAPI_MakeCylinder
        print("   ‚úÖ BRepPrimAPI_MakeCylinder –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ BRepPrimAPI_MakeCylinder: {e}")
        return False
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤...")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É–±–∞
        box_maker = BRepPrimAPI_MakeBox(10.0, 10.0, 10.0)
        box = box_maker.Shape()
        print("   ‚úÖ –ö—É–± —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã
        sphere_maker = BRepPrimAPI_MakeSphere(5.0)
        sphere = sphere_maker.Shape()
        print("   ‚úÖ –°—Ñ–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–∞
        cylinder_maker = BRepPrimAPI_MakeCylinder(3.0, 8.0)
        cylinder = cylinder_maker.Shape()
        print("   ‚úÖ –¶–∏–ª–∏–Ω–¥—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤: {e}")
        return False
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –æ–±—ä–µ–∫—Ç–æ–≤
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ –æ–±—ä–µ–∫—Ç–æ–≤...")
    
    try:
        from OCC.Core.BRepGProp import brepgprop_VolumeProperties
        from OCC.Core.GProp import GProp_GProps
        
        # –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –∫—É–±–∞
        props = GProp_GProps()
        brepgprop_VolumeProperties(box, props)
        volume = props.Mass()
        print(f"   ‚úÖ –û–±—ä–µ–º –∫—É–±–∞: {volume:.2f}")
        
        # –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ —Å—Ñ–µ—Ä—ã
        props = GProp_GProps()
        brepgprop_VolumeProperties(sphere, props)
        volume = props.Mass()
        print(f"   ‚úÖ –û–±—ä–µ–º —Å—Ñ–µ—Ä—ã: {volume:.2f}")
        
        # –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ —Ü–∏–ª–∏–Ω–¥—Ä–∞
        props = GProp_GProps()
        brepgprop_VolumeProperties(cylinder, props)
        volume = props.Mass()
        print(f"   ‚úÖ –û–±—ä–µ–º —Ü–∏–ª–∏–Ω–¥—Ä–∞: {volume:.2f}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–≤–æ–π—Å—Ç–≤: {e}")
        return False
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π...")
    
    try:
        from OCC.Core.gp import gp_Trsf, gp_Vec
        from OCC.Core.BRepBuilderAPI import BRepBuilderAPI_Transform
        
        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É–±–∞
        trsf = gp_Trsf()
        trsf.SetTranslation(gp_Vec(10, 0, 0))
        transform = BRepBuilderAPI_Transform(box, trsf)
        moved_box = transform.Shape()
        print("   ‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∫—É–±–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return False
    
    print("\n" + "=" * 50)
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã OpenCASCADE –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    print("üéâ OpenCASCADE –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ TheSolution CAD")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = test_opencascade()
        if success:
            print("\nüöÄ –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É 3D-Solution!")
        else:
            print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å OpenCASCADE")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
