#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã TheSolution

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –∫–ª–∞—Å—Å–æ–≤ Solution –∏ SolutionCoordinate
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'Base Solution', 'python'))

# –ü—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤–º–µ—Å—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö
from solution_coordinate import SolutionCoordinate
from base_solution import Solution

def test_solution_coordinate():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å SolutionCoordinate"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SolutionCoordinate...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    coord1 = SolutionCoordinate(10, 20, 30)
    coord2 = SolutionCoordinate(5, 5, 5, 2.0, 1.5, 0.5)
    
    print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 1: {coord1}")
    print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 2: {coord2}")
    
    # –¢–µ—Å—Ç –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    pos = coord1.get_position()
    orient = coord1.get_orientation()
    print(f"–ü–æ–∑–∏—Ü–∏—è: {pos}")
    print(f"–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {orient}")
    
    # –¢–µ—Å—Ç –º–∞—Ç—Ä–∏—Ü—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    matrix = coord1.get_transformation_matrix()
    print(f"–ú–∞—Ç—Ä–∏—Ü–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n{matrix}")
    
    # –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
    coord_sum = coord1 + coord2
    coord_diff = coord1 - coord2
    print(f"–°—É–º–º–∞: {coord_sum}")
    print(f"–†–∞–∑–Ω–æ—Å—Ç—å: {coord_diff}")
    
    # –¢–µ—Å—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    distance = coord1.distance_to(coord2)
    print(f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {distance}")
    
    print("‚úÖ SolutionCoordinate —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã\n")

def test_solution():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å Solution"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Solution...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
    root = Solution("Root", SolutionCoordinate(0, 0, 0))
    child1 = Solution("Child1", SolutionCoordinate(10, 0, 0))
    child2 = Solution("Child2", SolutionCoordinate(0, 10, 0))
    grandchild = Solution("GrandChild", SolutionCoordinate(5, 5, 0))
    
    print(f"–ö–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç: {root}")
    print(f"–î–æ—á–µ—Ä–Ω–∏–π –æ–±—ä–µ–∫—Ç: {child1}")
    
    # –¢–µ—Å—Ç –∏–µ—Ä–∞—Ä—Ö–∏–∏
    root.add_child(child1)
    root.add_child(child2)
    child1.add_child(grandchild)
    
    print(f"–î–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–Ω—è: {len(root.get_children())}")
    print(f"–†–æ–¥–∏—Ç–µ–ª—å child1: {child1.get_parent()}")
    print(f"–ü–æ—Ç–æ–º–∫–∏ root: {len(root.get_descendants())}")
    
    # –¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã child1: x={child1.x}, y={child1.y}, z={child1.z}")
    child1.x = 50
    print(f"–ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã child1: x={child1.x}")
    
    # –¢–µ—Å—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    abs_coord = grandchild.get_absolute_coordinate()
    print(f"–ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã grandchild: {abs_coord}")
    
    # –¢–µ—Å—Ç —Å–≤–æ–π—Å—Ç–≤
    root.set_property("color", "red")
    root.set_property("material", "steel")
    print(f"–°–≤–æ–π—Å—Ç–≤–∞ root: {root.properties}")
    
    # –¢–µ—Å—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    root.set_visible(False)
    root.set_locked(True)
    print(f"Root –≤–∏–¥–∏–º—ã–π: {root.is_visible()}")
    print(f"Root –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {root.is_locked()}")
    
    print("‚úÖ Solution —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã\n")

def test_hierarchy():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
    assembly = Solution("Assembly")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    base = Solution("Base", SolutionCoordinate(0, 0, 0))
    pillar1 = Solution("Pillar1", SolutionCoordinate(10, 0, 0))
    pillar2 = Solution("Pillar2", SolutionCoordinate(-10, 0, 0))
    top = Solution("Top", SolutionCoordinate(0, 0, 20))
    
    # –°–±–æ—Ä–∫–∞
    assembly.add_child(base)
    assembly.add_child(pillar1)
    assembly.add_child(pillar2)
    assembly.add_child(top)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    print(f"–°–±–æ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(assembly.get_children())} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    print(f"–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏: {len(assembly.get_descendants()) + 1}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    root = pillar1.get_root()
    print(f"–ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è pillar1: {root.name}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–∫–æ–≤
    ancestors = top.get_ancestors()
    print(f"–ü—Ä–µ–¥–∫–∏ top: {[a.name for a in ancestors]}")
    
    print("‚úÖ –ò–µ—Ä–∞—Ä—Ö–∏—è —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã\n")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã TheSolution")
    print("=" * 50)
    
    try:
        test_solution_coordinate()
        test_solution()
        test_hierarchy()
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\n–ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –°–æ–∑–¥–∞—Ç—å GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        print("3. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å OpenCASCADE")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
