# üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub Actions –¥–ª—è TheSolution CAD –≤ Windows
# –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ PowerShell

Write-Host "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub Actions –¥–ª—è TheSolution CAD..." -ForegroundColor Cyan

# –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É GitHub Actions
New-Item -ItemType Directory -Force -Path ".github\workflows"
New-Item -ItemType Directory -Force -Path ".github\ISSUE_TEMPLATE"

Write-Host "üìÅ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π" -ForegroundColor Green

# 1. –û—Å–Ω–æ–≤–Ω–æ–π CI workflow
$ciContent = @"
name: üèóÔ∏è TheSolution CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  python-tests:
    name: üêç Python Tests
    runs-on: `${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: üêç Set up Python `${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: `${{ matrix.python-version }}

    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        if (Test-Path requirements.txt) { pip install -r requirements.txt }

    - name: üß™ Run tests (Windows)
      if: runner.os == 'Windows'
      run: |
        if (Test-Path test_basic_system.py) { python test_basic_system.py }
        if (Test-Path test_root_solution.py) { python test_root_solution.py }
        
        python -c "
        import sys
        import os
        sys.path.insert(0, 'Base Solution/python')
        sys.path.insert(0, 'Root Solution/python')
        
        try:
            from solution_coordinate import SolutionCoordinate
            print('‚úÖ SolutionCoordinate –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
        except ImportError as e:
            print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ SolutionCoordinate: {e}')
        
        try:
            from base_solution import Solution
            print('‚úÖ Solution –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
        except ImportError as e:
            print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Solution: {e}')
        
        print('üéâ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã')
        "

    - name: üß™ Run tests (Linux)
      if: runner.os == 'Linux'
      run: |
        if [ -f test_basic_system.py ]; then python test_basic_system.py; fi
        if [ -f test_root_solution.py ]; then python test_root_solution.py; fi
        
        python -c "
        import sys
        import os
        sys.path.insert(0, 'Base Solution/python')
        sys.path.insert(0, 'Root Solution/python')
        
        try:
            from solution_coordinate import SolutionCoordinate
            print('‚úÖ SolutionCoordinate –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
        except ImportError as e:
            print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ SolutionCoordinate: {e}')
        
        try:
            from base_solution import Solution
            print('‚úÖ Solution –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
        except ImportError as e:
            print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Solution: {e}')
        
        print('üéâ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã')
        "

  quality-check:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: üì¶ Install quality tools
      run: |
        pip install flake8 black
    
    - name: üîç Basic lint check
      run: |
        find . -name "*.py" -not -path "./.git/*" | head -10 | xargs flake8 --max-line-length=100 --ignore=E501,W503 || true
        echo "‚úÖ Lint –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    
    - name: üé® Format check
      run: |
        find . -name "*.py" -not -path "./.git/*" | head -5 | xargs black --check --diff || true
        echo "‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"
"@

$ciContent | Out-File -FilePath ".github\workflows\ci.yml" -Encoding UTF8
Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω .github\workflows\ci.yml" -ForegroundColor Green

# 2. –ü—Ä–æ—Å—Ç–æ–π Python workflow –¥–ª—è PR
$pythonCheckContent = @"
name: üêç Python Check

on:
  pull_request:
    paths:
      - '**/*.py'

jobs:
  quick-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: üîç Quick Python check
      run: |
        python -m py_compile `$(find . -name "*.py" | head -20) || true
        echo "‚úÖ Python syntax check completed"
"@

$pythonCheckContent | Out-File -FilePath ".github\workflows\python-check.yml" -Encoding UTF8
Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω .github\workflows\python-check.yml" -ForegroundColor Green

# 3. Dependabot –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
$dependabotContent = @"
version: 2
updates:
  - package-ecosystem: "pip"
    directory: "/"
    schedule:
      interval: "weekly"
    commit-message:
      prefix: "‚¨ÜÔ∏è"

  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "monthly"
    commit-message:
      prefix: "üîß"
"@

$dependabotContent | Out-File -FilePath ".github\dependabot.yml" -Encoding UTF8
Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω .github\dependabot.yml" -ForegroundColor Green

# 4. –°–æ–∑–¥–∞–µ–º requirements-dev.txt –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
$requirementsDevContent = @"
# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
pytest>=7.0.0
pytest-cov>=4.0.0
black>=22.0.0
flake8>=5.0.0
isort>=5.10.0

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
bandit>=1.7.0
safety>=2.0.0

# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
sphinx>=5.0.0
sphinx-rtd-theme>=1.0.0
"@

$requirementsDevContent | Out-File -FilePath "requirements-dev.txt" -Encoding UTF8
Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω requirements-dev.txt" -ForegroundColor Green

# 5. –ü—Ä–æ—Å—Ç–æ–π setup.cfg
$setupCfgContent = @"
[flake8]
max-line-length = 100
extend-ignore = E203, W503, E501
exclude = 
    .git,
    __pycache__,
    build/,
    dist/,
    .venv/,
    venv/

[tool:pytest]
testpaths = .
python_files = test_*.py
addopts = --verbose --tb=short

[coverage:run]
source = .
omit = 
    tests/*
    setup.py
    */site-packages/*
    .venv/*
    venv/*
"@

$setupCfgContent | Out-File -FilePath "setup.cfg" -Encoding UTF8
Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω setup.cfg" -ForegroundColor Green

# 6. –°–æ–∑–¥–∞–µ–º .gitignore –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if (-not (Test-Path ".gitignore")) {
    $gitignoreContent = @"
# Python
__pycache__/
*.py[cod]
*`$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Project specific
*.log
temp/
build/
cmake-build-*/

# Qt
*.pro.user
*.pro.user.*
moc_*.cpp
qrc_*.cpp
ui_*.h
"@

    $gitignoreContent | Out-File -FilePath ".gitignore" -Encoding UTF8
    Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω .gitignore" -ForegroundColor Green
}

# 7. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (Test-Path "–æ—Ç—á–µ—Ç_—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.md") {
    $date = Get-Date -Format "dd.MM.yyyy"
    $reportUpdate = @"

## üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD ($date)

### ‚úÖ –ß—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:
- GitHub Actions workflow –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ (flake8, black)
- Dependabot –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
- –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

### üìã –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:
- `.github/workflows/ci.yml` - –æ—Å–Ω–æ–≤–Ω–æ–π CI pipeline
- `.github/workflows/python-check.yml` - –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Python
- `.github/dependabot.yml` - –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
- `requirements-dev.txt` - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- `setup.cfg` - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

### üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –ó–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏ –∑–∞–ø—É—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
2. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π PR –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CI
3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞—â–∏—Ç—É main –≤–µ—Ç–∫–∏
4. –î–æ–±–∞–≤–∏—Ç—å badge —Å—Ç–∞—Ç—É—Å–∞ –≤ README.md

"@

    Add-Content -Path "–æ—Ç—á–µ—Ç_—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.md" -Value $reportUpdate
    Write-Host "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –æ—Ç—á–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏" -ForegroundColor Green
}

Write-Host ""
Write-Host "üéâ GitHub Actions –Ω–∞—Å—Ç—Ä–æ–µ–Ω!" -ForegroundColor Green
Write-Host ""
Write-Host "üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Yellow
Write-Host "1. git add .github/ requirements-dev.txt setup.cfg" -ForegroundColor White
Write-Host "2. git commit -m 'üîß Add GitHub Actions CI/CD'" -ForegroundColor White
Write-Host "3. git push" -ForegroundColor White
Write-Host "4. –°–æ–∑–¥–∞–π—Ç–µ PR –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CI" -ForegroundColor White
Write-Host ""
Write-Host "üìä –ü–æ—Å–ª–µ push –≤—ã —É–≤–∏–¥–∏—Ç–µ:" -ForegroundColor Cyan
Write-Host "- –í–∫–ª–∞–¥–∫—É 'Actions' –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏" -ForegroundColor White
Write-Host "- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ PR" -ForegroundColor White
Write-Host "- –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–º –∫–æ–º–º–∏—Ç–µ" -ForegroundColor White