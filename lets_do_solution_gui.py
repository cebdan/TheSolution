#!/usr/bin/env python3
"""
Let's Do Solution GUI - –ö—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—à–µ–Ω–∏—è–º–∏ TheSolution CAD
–ó–∞–≥—Ä—É–∂–∞–µ—Ç UI —Ñ–∞–π–ª –∏–∑ Qt Designer –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""

import sys
import subprocess
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "Base Solution" / "python"))
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "Root Solution" / "python"))

try:
    from PySide6.QtWidgets import (QApplication, QMainWindow, QMessageBox, 
                                   QTreeWidgetItem, QFileDialog)
    from PySide6.QtCore import Qt, QThread, Signal
    from PySide6.QtGui import QIcon, QFont
    from PySide6.QtUiTools import QUiLoader
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: PySide6 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install PySide6")
    sys.exit(1)

class SolutionWorker(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ä–µ—à–µ–Ω–∏—è–º–∏"""
    log_signal = Signal(str)
    finished_signal = Signal(bool, str)
    
    def __init__(self, operation, *args):
        super().__init__()
        self.operation = operation
        self.args = args
    
    def run(self):
        try:
            if self.operation == "launch_3d":
                self.launch_3d_solution()
            elif self.operation == "create_3d_objects":
                self.create_3d_objects()
            elif self.operation == "demo":
                self.run_demo()
            elif self.operation == "test":
                self.run_tests()
            elif self.operation == "root_launcher":
                self.launch_root_launcher()
            else:
                self.finished_signal.emit(False, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {self.operation}")
        except Exception as e:
            self.finished_signal.emit(False, f"–û—à–∏–±–∫–∞: {e}")
    
    def launch_3d_solution(self):
        self.log_signal.emit("üéØ –ó–∞–ø—É—Å–∫ 3D-Solution GUI...")
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º 3D-Solution GUI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            subprocess.Popen([sys.executable, "3d_solution_gui.py"], 
                           creationflags=subprocess.CREATE_NEW_CONSOLE)
            self.log_signal.emit("‚úÖ 3D-Solution GUI –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ")
            self.finished_signal.emit(True, "3D-Solution GUI –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            self.finished_signal.emit(False, f"–û—à–∏–±–∫–∞: {e}")
    
    def create_3d_objects(self):
        self.log_signal.emit("üî∏ –°–æ–∑–¥–∞–Ω–∏–µ 3D –æ–±—ä–µ–∫—Ç–æ–≤...")
        try:
            from solution_data_types import SolutionType, SolutionDataUtils, SolutionCoordinate, SolutionMaterial
            
            # –°–æ–∑–¥–∞–µ–º –∫—É–±
            box = SolutionDataUtils.create_minimal_solution_data(
                name="–ú–æ–π –ö—É–±",
                solution_type=SolutionType.BOX,
                coordinate=SolutionCoordinate(0, 0, 0)
            )
            box.dimensions.width = 10.0
            box.dimensions.height = 10.0
            box.dimensions.depth = 10.0
            box.properties.material = SolutionMaterial(name="Steel", density=7.85)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ñ–µ—Ä—É
            sphere = SolutionDataUtils.create_minimal_solution_data(
                name="–ú–æ—è –°—Ñ–µ—Ä–∞",
                solution_type=SolutionType.SPHERE,
                coordinate=SolutionCoordinate(15, 0, 0)
            )
            sphere.dimensions.radius = 5.0
            sphere.properties.material = SolutionMaterial(name="Aluminum", density=2.7)
            
            self.log_signal.emit(f"‚úÖ –°–æ–∑–¥–∞–Ω {box.properties.name} - –æ–±—ä–µ–º: {box.dimensions.get_volume_box():.2f} –∫—É–±.–µ–¥.")
            self.log_signal.emit(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ {sphere.properties.name} - –æ–±—ä–µ–º: {sphere.dimensions.get_volume_sphere():.2f} –∫—É–±.–µ–¥.")
            self.finished_signal.emit(True, "3D –æ–±—ä–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
            
        except Exception as e:
            self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤: {e}")
            self.finished_signal.emit(False, f"–û—à–∏–±–∫–∞: {e}")
    
    def run_demo(self):
        self.log_signal.emit("üé¨ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        result = subprocess.run([sys.executable, "demo_root_solution.py"], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            self.log_signal.emit("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            self.finished_signal.emit(True, "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        else:
            self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {result.stderr}")
            self.finished_signal.emit(False, f"–û—à–∏–±–∫–∞: {result.stderr}")
    
    def run_tests(self):
        self.log_signal.emit("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
        result = subprocess.run([sys.executable, "test_root_solution.py"], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            self.log_signal.emit("‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            self.finished_signal.emit(True, "–¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        else:
            self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤: {result.stderr}")
            self.finished_signal.emit(False, f"–û—à–∏–±–∫–∞: {result.stderr}")
    
    def launch_root_launcher(self):
        self.log_signal.emit("üèóÔ∏è –ó–∞–ø—É—Å–∫ Root Solution Launcher...")
        result = subprocess.run([sys.executable, "Root Solution/main.py"], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            self.log_signal.emit("‚úÖ Root Solution Launcher –∑–∞–ø—É—â–µ–Ω")
            self.finished_signal.emit(True, "Root Solution Launcher –∑–∞–ø—É—â–µ–Ω")
        else:
            self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.stderr}")
            self.finished_signal.emit(False, f"–û—à–∏–±–∫–∞: {result.stderr}")

class LetsDoSolutionGUI(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ Let's Do Solution"""
    
    def __init__(self):
        super().__init__()
        self.workers = []  # –•—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ç–æ–∫–∏
        self.load_ui()
        self.setup_connections()
        self.load_solutions_tree()
        self.log_message("üöÄ Let's Do Solution GUI –∑–∞–ø—É—â–µ–Ω")
    
    def load_ui(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ UI –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            ui_file = Path(__file__).parent / "Gui" / "lets_do_solution.ui"
            if not ui_file.exists():
                raise FileNotFoundError(f"UI —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {ui_file}")
            
            loader = QUiLoader()
            self.ui = loader.load(str(ui_file))
            
            if not self.ui:
                raise RuntimeError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ UI —Ñ–∞–π–ª–∞")
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ UI
            for attr_name in dir(self.ui):
                if not attr_name.startswith('_'):
                    setattr(self, attr_name, getattr(self.ui, attr_name))
            
            self.setCentralWidget(self.ui.centralwidget)
            self.setWindowTitle("TheSolution CAD - Let's Do Solution")
            self.resize(1200, 800)
            
        except Exception as e:
            QMessageBox.critical(None, "Error", f"Failed to load UI: {e}")
            sys.exit(1)
    
    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # 3D-Solution –∫–Ω–æ–ø–∫–∏
        self.launch3DButton.clicked.connect(lambda: self.run_solution_operation("launch_3d"))
        self.create3DObjectsButton.clicked.connect(lambda: self.run_solution_operation("create_3d_objects"))
        self.geometryButton.clicked.connect(self.show_not_implemented)
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        self.rootLauncherButton.clicked.connect(lambda: self.run_solution_operation("root_launcher"))
        self.demoButton.clicked.connect(lambda: self.run_solution_operation("demo"))
        self.testButton.clicked.connect(lambda: self.run_solution_operation("test"))
        self.infoButton.clicked.connect(self.show_solutions_info)
        self.refreshButton.clicked.connect(self.load_solutions_tree)
        
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ—à–µ–Ω–∏–π (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç "–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
        solution_buttons = [
            'launch2DButton', 'createDrawingsButton',
            'launchAssemblyButton', 'createAssembliesButton',
            'launchAnalysisButton', 'analysisButton',
            'launchSimulationButton', 'simulationButton',
            'launchManufacturingButton', 'manufacturingButton',
            'launchDocumentationButton', 'documentationButton',
            'launchCollaborationButton', 'collaborationButton'
        ]
        
        for button_name in solution_buttons:
            if hasattr(self, button_name):
                button = getattr(self, button_name)
                if hasattr(button, 'clicked'):
                    button.clicked.connect(self.show_not_implemented)
    
    def load_solutions_tree(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π"""
        try:
            self.solutionsTree.clear()
            
            import importlib.util
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç root_solution_manager
            spec = importlib.util.spec_from_file_location(
                "root_solution_manager", 
                Path(__file__).parent / "Root Solution" / "python" / "root_solution_manager.py"
            )
            root_solution_manager = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(root_solution_manager)
            
            manager = root_solution_manager.get_root_manager()
            solutions_info = manager.get_all_solutions_info()
            
            for name, info in solutions_info.items():
                item = QTreeWidgetItem(self.solutionsTree)
                item.setText(0, name)
                
                status_icon = "‚úÖ" if info["status"] == "active" else "‚è∏Ô∏è"
                item.setText(1, status_icon)
                item.setText(2, info["solution_type"])
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if info["status"] == "active":
                    item.setBackground(0, Qt.green)
                else:
                    item.setBackground(0, Qt.gray)
            
            self.log_message("üìã –î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ä–µ–≤–∞: {e}")
    
    def run_solution_operation(self, operation):
        """–ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ä–µ—à–µ–Ω–∏–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.log_message(f"üîÑ –ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation}")
        self.statusLabel.setText(f"–°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {operation}")
        self.progressBar.setValue(50)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
        worker = SolutionWorker(operation)
        worker.log_signal.connect(self.log_message)
        worker.finished_signal.connect(self.on_operation_finished)
        
        self.workers.append(worker)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
        worker.start()
    
    def on_operation_finished(self, success, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        if success:
            self.statusLabel.setText("–°—Ç–∞—Ç—É—Å: –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            self.progressBar.setValue(100)
            self.log_message(f"‚úÖ {message}")
        else:
            self.statusLabel.setText("–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            self.progressBar.setValue(0)
            self.log_message(f"‚ùå {message}")
    
    def show_solutions_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—à–µ–Ω–∏—è—Ö"""
        try:
            import importlib.util
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç root_solution_manager
            spec = importlib.util.spec_from_file_location(
                "root_solution_manager", 
                Path(__file__).parent / "Root Solution" / "python" / "root_solution_manager.py"
            )
            root_solution_manager = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(root_solution_manager)
            
            manager = root_solution_manager.get_root_manager()
            solutions_info = manager.get_all_solutions_info()
            
            info_text = "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—à–µ–Ω–∏—è—Ö:\n"
            info_text += "=" * 40 + "\n\n"
            
            for name, info in solutions_info.items():
                status_icon = "‚úÖ" if info["status"] == "active" else "‚è∏Ô∏è"
                info_text += f"{status_icon} {name}:\n"
                info_text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}\n"
                info_text += f"   –¢–∏–ø: {info['solution_type']}\n"
                info_text += f"   –°—Ç–∞—Ç—É—Å: {info['status']}\n\n"
            
            active_count = len([s for s in solutions_info.values() if s["status"] == "active"])
            info_text += f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π: {active_count}/{len(solutions_info)}"
            
            self.logTextEdit.setText(info_text)
            self.log_message("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—à–µ–Ω–∏—è—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    def show_not_implemented(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞"""
        sender = self.sender()
        if sender:
            button_text = sender.text()
            QMessageBox.information(self, "üöß Function in development", 
                                  f"–§—É–Ω–∫—Ü–∏—è '{button_text}' –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.\n\n"
                                  "‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                                  "‚Ä¢ üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å 3D-Solution\n"
                                  "‚Ä¢ üî∏ –°–æ–∑–¥–∞—Ç—å 3D –æ–±—ä–µ–∫—Ç—ã\n"
                                  "‚Ä¢ üèóÔ∏è Root Solution Launcher\n"
                                  "‚Ä¢ üé¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n"
                                  "‚Ä¢ üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n\n"
                                  "üîÑ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:\n"
                                  "‚Ä¢ 2D-Solution\n"
                                  "‚Ä¢ Assembly-Solution\n"
                                  "‚Ä¢ Analysis-Solution\n"
                                  "‚Ä¢ Simulation-Solution\n"
                                  "‚Ä¢ Manufacturing-Solution\n"
                                  "‚Ä¢ Documentation-Solution\n"
                                  "‚Ä¢ Collaboration-Solution")
    
    def log_message(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        self.logTextEdit.append(log_entry)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ü—É
        scrollbar = self.logTextEdit.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
        for worker in self.workers:
            if worker.isRunning():
                worker.terminate()
                worker.wait()
        
        event.accept()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = QApplication(sys.argv)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setStyle('Fusion')
    
    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    window = LetsDoSolutionGUI()
    window.show()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    sys.exit(app.exec())

if __name__ == "__main__":
    main()
