#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ conda –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
–û—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç OpenCASCADE –∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è TheSolution
"""

import sys
import subprocess
import platform
import os
from pathlib import Path

def run_command(command, check=True):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if check and result.returncode != 0:
            print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {command}")
            print(f"–û—à–∏–±–∫–∞: {result.stderr}")
            return False
        return result
    except Exception as e:
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
        return False

def check_conda():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å conda –∏ –µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ conda...")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å conda
    result = run_command("conda --version", check=False)
    if result and result.returncode == 0:
        print(f"‚úÖ conda –Ω–∞–π–¥–µ–Ω: {result.stdout.strip()}")
    else:
        print("‚ùå conda –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –°–ø–∏—Å–æ–∫ –æ–∫—Ä—É–∂–µ–Ω–∏–π
    print("\nüìã –°–ø–∏—Å–æ–∫ conda –æ–∫—Ä—É–∂–µ–Ω–∏–π:")
    result = run_command("conda env list", check=False)
    if result and result.returncode == 0:
        print(result.stdout)
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∫—Ä—É–∂–µ–Ω–∏–π")
    
    # –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    print("\nüéØ –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
    result = run_command("conda info --envs", check=False)
    if result and result.returncode == 0:
        lines = result.stdout.split('\n')
        for line in lines:
            if '*' in line:
                print(f"–ê–∫—Ç–∏–≤–Ω–æ–µ: {line}")
                break
    
    return True

def check_installed_packages():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...")
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    result = run_command("conda list", check=False)
    if result and result.returncode == 0:
        packages = result.stdout.split('\n')
        
        # –ò—â–µ–º –≤–∞–∂–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
        important_packages = [
            'opencascade', 'occt', 'opencascade-occt',
            'qt', 'pyside', 'pyside6',
            'numpy', 'scipy',
            'cmake', 'make',
            'python', 'pip'
        ]
        
        found_packages = []
        for package in packages:
            for important in important_packages:
                if important.lower() in package.lower():
                    found_packages.append(package.strip())
                    break
        
        if found_packages:
            print("‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∂–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:")
            for pkg in found_packages:
                print(f"  {pkg}")
        else:
            print("‚ÑπÔ∏è –í–∞–∂–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü–æ–∏—Å–∫ OpenCASCADE
        print("\nüîç –ü–æ–∏—Å–∫ OpenCASCADE...")
        opencascade_found = False
        for package in packages:
            if 'opencascade' in package.lower() or 'occt' in package.lower():
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {package.strip()}")
                opencascade_found = True
        
        if not opencascade_found:
            print("‚ùå OpenCASCADE –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ conda")
            print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: conda install -c conda-forge opencascade")
        
        return opencascade_found
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤")
        return False

def check_opencascade_installation():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É OpenCASCADE"""
    print("\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ OpenCASCADE...")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ conda
    result = run_command("conda list | grep -i opencascade", check=False)
    if result and result.returncode == 0 and result.stdout.strip():
        print(f"‚úÖ OpenCASCADE –≤ conda: {result.stdout.strip()}")
    else:
        print("‚ÑπÔ∏è OpenCASCADE –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ conda")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ pip
    result = run_command("pip list | grep -i opencascade", check=False)
    if result and result.returncode == 0 and result.stdout.strip():
        print(f"‚úÖ OpenCASCADE –≤ pip: {result.stdout.strip()}")
    else:
        print("‚ÑπÔ∏è OpenCASCADE –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ pip")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É
    if platform.system() == "Windows":
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ Windows
        possible_paths = [
            "C:\\OpenCASCADE-7.6.0",
            "C:\\OpenCASCADE-7.5.0",
            "C:\\OpenCASCADE-7.4.0",
            "C:\\Program Files\\OpenCASCADE",
            "C:\\Program Files (x86)\\OpenCASCADE"
        ]
        
        for path in possible_paths:
            if Path(path).exists():
                print(f"‚úÖ OpenCASCADE –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ: {path}")
                return True
        
        print("‚ÑπÔ∏è OpenCASCADE –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É—Ç—è—Ö Windows")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_vars = ['OpenCASCADE_DIR', 'OCCT_DIR', 'OpenCASCADE_ROOT']
    for var in env_vars:
        value = os.environ.get(var)
        if value:
            print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {var}: {value}")
            return True
    
    return False

def check_qt_installation():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É Qt"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Qt...")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ conda
    result = run_command("conda list | grep -i qt", check=False)
    if result and result.returncode == 0 and result.stdout.strip():
        print("‚úÖ Qt –Ω–∞–π–¥–µ–Ω –≤ conda:")
        for line in result.stdout.strip().split('\n'):
            if line.strip():
                print(f"  {line.strip()}")
    else:
        print("‚ÑπÔ∏è Qt –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ conda")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å PySide6
    try:
        import PySide6
        print(f"‚úÖ PySide6 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {PySide6.__version__}")
    except ImportError:
        print("‚ÑπÔ∏è PySide6 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: conda install -c conda-forge pyside6")

def check_python_packages():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Python –ø–∞–∫–µ—Ç—ã"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤...")
    
    packages_to_check = [
        'numpy', 'scipy', 'matplotlib',
        'PySide6', 'PyQt6',
        'pybind11', 'setuptools'
    ]
    
    for package in packages_to_check:
        try:
            module = __import__(package)
            version = getattr(module, '__version__', 'unknown')
            print(f"‚úÖ {package}: {version}")
        except ImportError:
            print(f"‚ùå {package}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def suggest_installation():
    """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:")
    
    print("\n1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ OpenCASCADE —á–µ—Ä–µ–∑ conda:")
    print("   conda install -c conda-forge opencascade")
    
    print("\n2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Qt —á–µ—Ä–µ–∑ conda:")
    print("   conda install -c conda-forge qt pyside6")
    
    print("\n3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤:")
    print("   conda install -c conda-forge numpy scipy matplotlib")
    print("   conda install -c conda-forge pybind11")
    
    print("\n4. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –≤—Å–µ–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏:")
    print("   conda create -n thesolution python=3.9")
    print("   conda activate thesolution")
    print("   conda install -c conda-forge opencascade qt pyside6 numpy scipy matplotlib pybind11")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ conda –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è TheSolution")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    conda_ok = check_conda()
    if not conda_ok:
        print("‚ùå conda –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Anaconda –∏–ª–∏ Miniconda")
        return
    
    check_installed_packages()
    opencascade_ok = check_opencascade_installation()
    check_qt_installation()
    check_python_packages()
    
    print("\n" + "=" * 60)
    if opencascade_ok:
        print("‚úÖ OpenCASCADE –Ω–∞–π–¥–µ–Ω! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ùå OpenCASCADE –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.")
    
    suggest_installation()

if __name__ == "__main__":
    main()
